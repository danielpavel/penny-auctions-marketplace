/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** MarketplaceNameTooLong: Marketplace name too long */
export class MarketplaceNameTooLongError extends ProgramError {
  override readonly name: string = 'MarketplaceNameTooLong';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Marketplace name too long', program, cause);
  }
}
codeToErrorMap.set(0x1770, MarketplaceNameTooLongError);
nameToErrorMap.set('MarketplaceNameTooLong', MarketplaceNameTooLongError);

/** ClaimerIsNotHighestBidder: Only the highest bidder can claim the auction */
export class ClaimerIsNotHighestBidderError extends ProgramError {
  override readonly name: string = 'ClaimerIsNotHighestBidder';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Only the highest bidder can claim the auction', program, cause);
  }
}
codeToErrorMap.set(0x1771, ClaimerIsNotHighestBidderError);
nameToErrorMap.set('ClaimerIsNotHighestBidder', ClaimerIsNotHighestBidderError);

/** ClaimerIsNotSeller: Only the listing seller can claim this auction */
export class ClaimerIsNotSellerError extends ProgramError {
  override readonly name: string = 'ClaimerIsNotSeller';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Only the listing seller can claim this auction', program, cause);
  }
}
codeToErrorMap.set(0x1772, ClaimerIsNotSellerError);
nameToErrorMap.set('ClaimerIsNotSeller', ClaimerIsNotSellerError);

/** BidderIsHighestBidder: Incomming bidder is already the highest bidder */
export class BidderIsHighestBidderError extends ProgramError {
  override readonly name: string = 'BidderIsHighestBidder';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Incomming bidder is already the highest bidder', program, cause);
  }
}
codeToErrorMap.set(0x1773, BidderIsHighestBidderError);
nameToErrorMap.set('BidderIsHighestBidder', BidderIsHighestBidderError);

/** AuctionNotActive: The auction is not active */
export class AuctionNotActiveError extends ProgramError {
  override readonly name: string = 'AuctionNotActive';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('The auction is not active', program, cause);
  }
}
codeToErrorMap.set(0x1774, AuctionNotActiveError);
nameToErrorMap.set('AuctionNotActive', AuctionNotActiveError);

/** AuctionNotStarted: The auction has not started */
export class AuctionNotStartedError extends ProgramError {
  override readonly name: string = 'AuctionNotStarted';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('The auction has not started', program, cause);
  }
}
codeToErrorMap.set(0x1775, AuctionNotStartedError);
nameToErrorMap.set('AuctionNotStarted', AuctionNotStartedError);

/** AuctionEnded: The auction has already ended */
export class AuctionEndedError extends ProgramError {
  override readonly name: string = 'AuctionEnded';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('The auction has already ended', program, cause);
  }
}
codeToErrorMap.set(0x1776, AuctionEndedError);
nameToErrorMap.set('AuctionEnded', AuctionEndedError);

/** AuctionNotEnded: The auction has not ended yet */
export class AuctionNotEndedError extends ProgramError {
  override readonly name: string = 'AuctionNotEnded';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('The auction has not ended yet', program, cause);
  }
}
codeToErrorMap.set(0x1777, AuctionNotEndedError);
nameToErrorMap.set('AuctionNotEnded', AuctionNotEndedError);

/** AuctionAlreadyEnded: The auction has already been ended */
export class AuctionAlreadyEndedError extends ProgramError {
  override readonly name: string = 'AuctionAlreadyEnded';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('The auction has already been ended', program, cause);
  }
}
codeToErrorMap.set(0x1778, AuctionAlreadyEndedError);
nameToErrorMap.set('AuctionAlreadyEnded', AuctionAlreadyEndedError);

/** CannotDelistWithActiveBidder: Cannot delist auction with active highest bidder */
export class CannotDelistWithActiveBidderError extends ProgramError {
  override readonly name: string = 'CannotDelistWithActiveBidder';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Cannot delist auction with active highest bidder', program, cause);
  }
}
codeToErrorMap.set(0x1779, CannotDelistWithActiveBidderError);
nameToErrorMap.set(
  'CannotDelistWithActiveBidder',
  CannotDelistWithActiveBidderError
);

/** CannotDelistWithActiveCurrentBidPrice: Cannot delist auction with active current bid price */
export class CannotDelistWithActiveCurrentBidPriceError extends ProgramError {
  override readonly name: string = 'CannotDelistWithActiveCurrentBidPrice';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot delist auction with active current bid price',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x177a, CannotDelistWithActiveCurrentBidPriceError);
nameToErrorMap.set(
  'CannotDelistWithActiveCurrentBidPrice',
  CannotDelistWithActiveCurrentBidPriceError
);

/** InvalidMetadataProgram: Invalid metadata program */
export class InvalidMetadataProgramError extends ProgramError {
  override readonly name: string = 'InvalidMetadataProgram';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid metadata program', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidMetadataProgramError);
nameToErrorMap.set('InvalidMetadataProgram', InvalidMetadataProgramError);

/** InvalidCurrentHighestBidderAndPrice: Invalid current highest bidder and price */
export class InvalidCurrentHighestBidderAndPriceError extends ProgramError {
  override readonly name: string = 'InvalidCurrentHighestBidderAndPrice';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Invalid current highest bidder and price', program, cause);
  }
}
codeToErrorMap.set(0x177c, InvalidCurrentHighestBidderAndPriceError);
nameToErrorMap.set(
  'InvalidCurrentHighestBidderAndPrice',
  InvalidCurrentHighestBidderAndPriceError
);

/** InvalidListingAuthority: Invalid authority! Only marketplace admin can create / end a listing */
export class InvalidListingAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidListingAuthority';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super(
      'Invalid authority! Only marketplace admin can create / end a listing',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x177d, InvalidListingAuthorityError);
nameToErrorMap.set('InvalidListingAuthority', InvalidListingAuthorityError);

/** AlreadyClaimed: User has already claimed tokens */
export class AlreadyClaimedError extends ProgramError {
  override readonly name: string = 'AlreadyClaimed';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('User has already claimed tokens', program, cause);
  }
}
codeToErrorMap.set(0x177e, AlreadyClaimedError);
nameToErrorMap.set('AlreadyClaimed', AlreadyClaimedError);

/** InvalidMintCost: Invalid mint const */
export class InvalidMintCostError extends ProgramError {
  override readonly name: string = 'InvalidMintCost';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Invalid mint const', program, cause);
  }
}
codeToErrorMap.set(0x177f, InvalidMintCostError);
nameToErrorMap.set('InvalidMintCost', InvalidMintCostError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getNftMarketplaceErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getNftMarketplaceErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
