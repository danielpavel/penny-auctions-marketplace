/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeUserInstructionAccounts = {
  user: Signer;
  userAccount?: PublicKey | Pda;
  marketplace: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitializeUserInstructionData = { discriminator: Uint8Array };

export type InitializeUserInstructionDataArgs = {};

export function getInitializeUserInstructionDataSerializer(): Serializer<
  InitializeUserInstructionDataArgs,
  InitializeUserInstructionData
> {
  return mapSerializer<
    InitializeUserInstructionDataArgs,
    any,
    InitializeUserInstructionData
  >(
    struct<InitializeUserInstructionData>(
      [['discriminator', bytes({ size: 8 })]],
      { description: 'InitializeUserInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([111, 17, 185, 250, 60, 122, 38, 254]),
    })
  ) as Serializer<
    InitializeUserInstructionDataArgs,
    InitializeUserInstructionData
  >;
}

// Instruction.
export function initializeUser(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: InitializeUserInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'nftMarketplace',
    'ATxkTBH2cbC28hV7n37QZ5d9hsc2Xpoio4ZHYSYFGHou'
  );

  // Accounts.
  const resolvedAccounts = {
    user: { index: 0, isWritable: true as boolean, value: input.user ?? null },
    userAccount: {
      index: 1,
      isWritable: true as boolean,
      value: input.userAccount ?? null,
    },
    marketplace: {
      index: 2,
      isWritable: false as boolean,
      value: input.marketplace ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.userAccount.value) {
    resolvedAccounts.userAccount.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([117, 115, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.marketplace.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.user.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeUserInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
