/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeInstructionAccounts = {
  admin: Signer;
  sbidMint: Signer;
  marketplace?: PublicKey | Pda;
  treasury?: PublicKey | Pda;
  tokenProgram2022?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitializeInstructionData = {
  discriminator: Uint8Array;
  name: string;
  fee: number;
  tokenName: string;
  tokenSymbol: string;
  uri: string;
};

export type InitializeInstructionDataArgs = {
  name: string;
  fee: number;
  tokenName: string;
  tokenSymbol: string;
  uri: string;
};

export function getInitializeInstructionDataSerializer(): Serializer<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return mapSerializer<
    InitializeInstructionDataArgs,
    any,
    InitializeInstructionData
  >(
    struct<InitializeInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
        ['fee', u16()],
        ['tokenName', string()],
        ['tokenSymbol', string()],
        ['uri', string()],
      ],
      { description: 'InitializeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237]),
    })
  ) as Serializer<InitializeInstructionDataArgs, InitializeInstructionData>;
}

// Args.
export type InitializeInstructionArgs = InitializeInstructionDataArgs;

// Instruction.
export function initialize(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: InitializeInstructionAccounts & InitializeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'nftMarketplace',
    'ATxkTBH2cbC28hV7n37QZ5d9hsc2Xpoio4ZHYSYFGHou'
  );

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    sbidMint: {
      index: 1,
      isWritable: true as boolean,
      value: input.sbidMint ?? null,
    },
    marketplace: {
      index: 2,
      isWritable: true as boolean,
      value: input.marketplace ?? null,
    },
    treasury: {
      index: 3,
      isWritable: false as boolean,
      value: input.treasury ?? null,
    },
    tokenProgram2022: {
      index: 4,
      isWritable: false as boolean,
      value: input.tokenProgram2022 ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitializeInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.marketplace.value) {
    resolvedAccounts.marketplace.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([109, 97, 114, 107, 101, 116, 112, 108, 97, 99, 101])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.admin.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.sbidMint.value)
      ),
      string().serialize(expectSome(resolvedArgs.name)),
    ]);
  }
  if (!resolvedAccounts.treasury.value) {
    resolvedAccounts.treasury.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.marketplace.value)
      ),
    ]);
  }
  if (!resolvedAccounts.tokenProgram2022.value) {
    resolvedAccounts.tokenProgram2022.value = context.programs.getPublicKey(
      'tokenProgram2022',
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'
    );
    resolvedAccounts.tokenProgram2022.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeInstructionDataSerializer().serialize(
    resolvedArgs as InitializeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
