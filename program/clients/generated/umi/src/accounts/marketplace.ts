/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { MintTier, MintTierArgs, getMintTierSerializer } from '../types';

export type Marketplace = Account<MarketplaceAccountData>;

export type MarketplaceAccountData = {
  discriminator: Uint8Array;
  admin: PublicKey;
  sbidMint: PublicKey;
  treasury: PublicKey;
  fee: number;
  name: string;
  mintTiers: Array<MintTier>;
  bump: number;
  treasuryBump: number;
};

export type MarketplaceAccountDataArgs = {
  admin: PublicKey;
  sbidMint: PublicKey;
  treasury: PublicKey;
  fee: number;
  name: string;
  mintTiers: Array<MintTierArgs>;
  bump: number;
  treasuryBump: number;
};

export function getMarketplaceAccountDataSerializer(): Serializer<
  MarketplaceAccountDataArgs,
  MarketplaceAccountData
> {
  return mapSerializer<MarketplaceAccountDataArgs, any, MarketplaceAccountData>(
    struct<MarketplaceAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['admin', publicKeySerializer()],
        ['sbidMint', publicKeySerializer()],
        ['treasury', publicKeySerializer()],
        ['fee', u16()],
        ['name', string()],
        ['mintTiers', array(getMintTierSerializer(), { size: 3 })],
        ['bump', u8()],
        ['treasuryBump', u8()],
      ],
      { description: 'MarketplaceAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([70, 222, 41, 62, 78, 3, 32, 174]),
    })
  ) as Serializer<MarketplaceAccountDataArgs, MarketplaceAccountData>;
}

export function deserializeMarketplace(rawAccount: RpcAccount): Marketplace {
  return deserializeAccount(rawAccount, getMarketplaceAccountDataSerializer());
}

export async function fetchMarketplace(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Marketplace> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Marketplace');
  return deserializeMarketplace(maybeAccount);
}

export async function safeFetchMarketplace(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Marketplace | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMarketplace(maybeAccount) : null;
}

export async function fetchAllMarketplace(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Marketplace[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Marketplace');
    return deserializeMarketplace(maybeAccount);
  });
}

export async function safeFetchAllMarketplace(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Marketplace[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMarketplace(maybeAccount as RpcAccount));
}

export function getMarketplaceGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'nftMarketplace',
    'ATxkTBH2cbC28hV7n37QZ5d9hsc2Xpoio4ZHYSYFGHou'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      admin: PublicKey;
      sbidMint: PublicKey;
      treasury: PublicKey;
      fee: number;
      name: string;
      mintTiers: Array<MintTierArgs>;
      bump: number;
      treasuryBump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      admin: [8, publicKeySerializer()],
      sbidMint: [40, publicKeySerializer()],
      treasury: [72, publicKeySerializer()],
      fee: [104, u16()],
      name: [106, string()],
      mintTiers: [null, array(getMintTierSerializer(), { size: 3 })],
      bump: [null, u8()],
      treasuryBump: [null, u8()],
    })
    .deserializeUsing<Marketplace>((account) => deserializeMarketplace(account))
    .whereField(
      'discriminator',
      new Uint8Array([70, 222, 41, 62, 78, 3, 32, 174])
    );
}
